/*
 * Codeshelf
 * © Copyright 2005-2013 Jeffrey B. Williams
 * All rights reserved
 * 
 * $Id$
 * $Name$
 */

#ifndef I2CMASTER_H_
#define I2CMASTER_H_

#include "PE_Types.h" // definitions of bool,byte
#include "IO_Map.h"  // hardware definitions
// The Master I2C driver can command a TX or RX message to
// any slave.
// A Tx or Rx message is initiated with the slave address
// and then an interrupt is generated by the device after
// each byte is sent or received.
// The length of the messages can be different for each
// slave.
// Max message size 16 bytes.
// Get_Busy_Status returns True whilst bus active
// Use Get_Busy_Status to indicate message transaction
// complete before Get_Read_Bytes.

#define IIC_DIV 0x00  // mult 1, ICR 00 (SCL div = 20, SDA hold = 7)
// 4MHz / (1 * 20) = 200K, SDA hold time = (1/4Mhz) * 7 = 1.75us

#define IIC_BUFFER_SIZE 16  
// Initailise the I2C module for master mode
extern void Init_I2CM(void);
// Interrupt handler to manage all master events on the I2C
// link
extern interrupt void I2C_ISR(void);
// Reports True during transmission
extern bool I2CM_Get_Busy_Status(void);
// Return the success of the last transmission.
extern bool I2CM_Get_No_Resp_Status(void);
// Starts an I2C transmission to read a number of bytes
// from a slave at an address. When complete use Get_Read_
// Bytes for data received.
extern void I2CM_Read_Bytes(byte Slave_Addr, byte Number_Of_Bytes);
// Copies data received to pointer location supplied.
// Only copies the number of bytes that was requested in
// the message.
extern void I2CM_Get_Read_Data(byte* Data);
// Starts an I2C transmission to write a number of bytes to
// a slave at an address. Copies data from pointer
// location, only copies number of bytes requested..
extern void I2CM_Write_Bytes(byte Slave_Addr, byte Number_Of_Bytes, const byte* Data);

#endif /* I2CMASTER_H_ */
